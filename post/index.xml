<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Hello World Everything</title>
    <link>http://helloworldeverything.com/post/index.xml</link>
    <description>Recent content in Post-rsses on Hello World Everything</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jan 2017 11:13:48 -0500</lastBuildDate>
    <atom:link href="http://helloworldeverything.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Comment faire sa lessive</title>
      <link>http://helloworldeverything.com/2017/01/comment-faire-sa-lessive/</link>
      <pubDate>Tue, 17 Jan 2017 11:13:48 -0500</pubDate>
      
      <guid>http://helloworldeverything.com/2017/01/comment-faire-sa-lessive/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Il existe essentiellement 5 techniques concernant le lavage de linges en voyage:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Aller dans une buanderie&lt;/li&gt;
&lt;li&gt;Utiliser un service de &amp;ldquo;laundry&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Lessive à la main dans le lavabo&lt;/li&gt;
&lt;li&gt;Lessive avec gadget de voyage&lt;/li&gt;
&lt;li&gt;Ne pas laver le linges et se dire qu&amp;rsquo;en restant dans le fond du sac il va commencer à devenir pas sal.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-aller-dans-un-buanderie&#34;&gt;1. Aller dans un buanderie&lt;/h2&gt;

&lt;p&gt;Bien que plus facile que de laver à la main, utiliser les machines coutent de l&amp;rsquo;argent et peut prendre jusqu&amp;rsquo;à 1h30.&lt;/p&gt;

&lt;h2 id=&#34;2-utilsier-un-service-de-laundry&#34;&gt;2. Utilsier un service de laundry&lt;/h2&gt;

&lt;p&gt;La méthode la plus facile, on laisse un sac de linges sals à quelqu&amp;rsquo;un, paye (souvent au poids), part faire ses activités de
la journée et le soir on récupère le linge propre et parfois pliés. Bien que facile cette méthode est celle qui coûte la plus cher.&lt;/p&gt;

&lt;h2 id=&#34;3-technique-du-lavage-à-main&#34;&gt;3. Technique du lavage à main&lt;/h2&gt;

&lt;p&gt;Il s&amp;rsquo;agit de la technique la plus économique et une des plus rapides!&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/uwPLy5LuDyk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Remplir (température entre tiède et chaud) le lavabo avec le savon à lessive et le linge.&lt;/li&gt;
&lt;li&gt;Frotter le linges ensemble pendant quelque secondes.&lt;/li&gt;
&lt;li&gt;Laisser reposer 10 minutes.&lt;/li&gt;
&lt;li&gt;Vider lavabo.&lt;/li&gt;
&lt;li&gt;Tordre linges pour enlever excedant de savon.&lt;/li&gt;
&lt;li&gt;Remplir lavabo avec le linge mais sans savon (cycle de rinsage).&lt;/li&gt;
&lt;li&gt;Laisser reposer 10 minutes.&lt;/li&gt;
&lt;li&gt;Vider lavabo.&lt;/li&gt;
&lt;li&gt;Les tordre pour enlever excédant d&amp;rsquo;eau.&lt;/li&gt;
&lt;li&gt;Utiliser le truc de la serviette pour accélerele cycle de séchage.&lt;/li&gt;
&lt;li&gt;Les accrocher pour les sécher&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;4-technique-avec-le-scrubba&#34;&gt;4. Technique avec le scrubba&lt;/h2&gt;

&lt;p&gt;Ces équipement quoi que un peu contreversé: cher pour ce qu&amp;rsquo;il est, voit ses utilités dans les environnements
où on n&amp;rsquo;a pas accès à un lavabo. Il est aussi plus rapide et supposément plus efficace que la technique du lavabos.&lt;/p&gt;

&lt;p&gt;Voici un &lt;a href=&#34;http://snarkynomad.com/reviewing-the-scrubba-a-30-second-manual-washing-machine-for-ultralight-backpacking/&#34;&gt;guide&lt;/a&gt; qui
analyse ce sac et décrit comment l&amp;rsquo;utiliser.&lt;/p&gt;

&lt;h2 id=&#34;5-ne-pas-laver-son-linges&#34;&gt;5. Ne pas laver son linges&lt;/h2&gt;

&lt;p&gt;lol&lt;/p&gt;

&lt;h1 id=&#34;technique-de-la-serviette&#34;&gt;Technique de la serviette&lt;/h1&gt;

&lt;p&gt;Voici une image très utile expliquant la technique de la serviette pour accélérer le lavage:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/lessives/roll-in-towel-dry.png&#34; alt=&#34;Technique de la serviette&#34; /&gt;
(Image tiré du &lt;a href=&#34;http://blog.tortugabackpacks.com/hand-washing-clothes/&#34;&gt;Blog Tortuga Backpack&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.tortugabackpacks.com/hand-washing-clothes/&#34;&gt;Guide du lavage à la main&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://travelfashiongirl.com/step-by-step-tutorial-how-to-hand-wash-clothing-when-travelling/&#34;&gt;Guide étape par étape du lavage à la main&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.ricksteves.com/travel-tips/health/laundry&#34;&gt;Guide avec les différentes techniques&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://snarkynomad.com/reviewing-the-scrubba-a-30-second-manual-washing-machine-for-ultralight-backpacking/&#34;&gt;Review et guide sur le Scrubba&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comprendre les tissues</title>
      <link>http://helloworldeverything.com/2017/01/comprendre-les-tissues/</link>
      <pubDate>Mon, 16 Jan 2017 10:10:51 -0500</pubDate>
      
      <guid>http://helloworldeverything.com/2017/01/comprendre-les-tissues/</guid>
      <description>&lt;p&gt;Pour mieux comprendre les différents types de tissues et leurs caractéristiques (au-delà des buzzword de marketing). Avec un dip dans l&amp;rsquo;histoire et comment ça marche.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Dès qu&amp;rsquo;on commence à magasiner les vêtements, on s&amp;rsquo;aperçoit rapidement qu&amp;rsquo;il faut regarder au-delà de juste s&amp;rsquo;il est beau ou non. Sur chaque étiquette de vêtement, on vante les propriétés (qui ne sont pas toujours clairs (i.e: comment un tissue peut être respirant et imperméable (l&amp;rsquo;explication un peu plus bas))) extraordinaires
de leur tissu breveté (p. ex.: Dry-FIT, CoolMax). &lt;strong&gt;Donc le but de ce post est qu&amp;rsquo;à la fin vous ayez une meilleure idée de quel type de tissue se procurer dans différentes
situation.&lt;/strong&gt; Pour commencer on va aborder les les différentes propriétés des vêtements au point de comprendre leur utilité et déterminer si on en a besoin pour un type
d&amp;rsquo;environnement ou pour une situation particulière. Puis aborder les différents types de tissues qu&amp;rsquo;on retrouve en magasin et quel utiliser pour quand.&lt;/p&gt;

&lt;!-- toc --&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Lorsqu&amp;rsquo;on achète un vêtement de tous les jours il est rare qu&amp;rsquo;on cherche un type de tissue en particulier, ce qui est valable, car on porte le vêtement 1 fois
(sauf les jeans&amp;hellip;) et ensuite on le jette dans la panier de lavage puis ouvre sa commode ou garde-robe pour un autre morceau parmi la panoplie de choix.&lt;/p&gt;

&lt;p&gt;Tout te fois, en voyage on n’a pas ce luxe: pas autant de choix (car on vise voyager ultraléger) et il n&amp;rsquo;y a pas toujours des buanderies disponibles.&lt;/p&gt;

&lt;p&gt;On recherche donc plusieurs qualités chez un vêtement:
* Sèche rapidement : permet qu&amp;rsquo;il sèche durant la nuit après l&amp;rsquo;avoir lavé dans le lavabo!
* Ne laisse pas se développer les bactéries (car la sueur ne sent rien, c&amp;rsquo;est plutôt les bactéries qui s&amp;rsquo;y forment pour manger la sueur qui pète (odeur)!): permets de porter le vêtement plusieurs jours!&lt;/p&gt;

&lt;h1 id=&#34;comprendre-les-propriétés&#34;&gt;Comprendre les propriétés&lt;/h1&gt;

&lt;h2 id=&#34;définition&#34;&gt;Définition&lt;/h2&gt;

&lt;p&gt;Par c&amp;rsquo;est toujours évident de comprendre ce que ces buzz-selling word veulent dire!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Respirant:  ne te fait pas plus sueur (opposé: un sac poubelle comme poncho)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Moisture Wicking&amp;rdquo;: Garde humidité loin du corps
Le principe est qu&amp;rsquo;il absorbe la sueur et la répand travers les tissue (grâce à la &lt;a href=&#34;https://fr.wikipedia.org/wiki/Capillarit%C3%A9&#34;&gt;capillarité&lt;/a&gt;(tldr: s&amp;rsquo;il y a un tube mince un liquide peut être aspiré par lui)
pour ainsi aider, accélérez son évaporation en augmentant la surface de contact avec l&amp;rsquo;air.
Il est important lors du sport, mais aussi dans les températures froides, car sueur et froid cause plus de froid (je suis au courant que le froid n&amp;rsquo;existe pas, mais que c&amp;rsquo;est plutôt une absence de chaleur, mais bref!)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Wrinkle Resistant&amp;rdquo;: Ne se froisse pas facilement (plein de petits plis)
Le principe est d&amp;rsquo;avoir un tissue plus fort (liens entre atomes plus solides (et donc moins chance de se briser et de se reformer dans une nouvelle configuration: un pli!))&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lesquels-sont-importants-pour-quelle-situation&#34;&gt;Lesquels sont importants pour quelle situation?&lt;/h2&gt;

&lt;h1 id=&#34;les-différents-types-de-tissue&#34;&gt;Les différents types de tissue&lt;/h1&gt;

&lt;p&gt;Il y a quelque type de tissue fréquent, qu&amp;rsquo;on va analyser 1 par 1: le coton, le polyester, la laine et le lin&lt;/p&gt;

&lt;h2 id=&#34;le-classique-coton&#34;&gt;Le classique coton&lt;/h2&gt;

&lt;p&gt;Tout d&amp;rsquo;abord il est fait à base de plante et il est le plus utilisé: grande majorité des t-shirts sont en coton (car il est facile de les teindre ),
les jeans sont du coton (le &amp;ldquo;denim&amp;rdquo; signigie seulement qu&amp;rsquo;il est tissé d&amp;rsquo;une façon particulière), majorité des tissues de la maison l&amp;rsquo;est! Aujourd&amp;rsquo;hui élément
banal autrefois &lt;a href=&#34;http://www.pbs.org/wnet/african-americans-many-rivers-to-cross/history/why-was-cotton-king/&#34;&gt;le coton était roi&lt;/a&gt; (tldr simpliste: première commodité
de consommation de masse, suite à l&amp;rsquo;invention du coton gin(machine permettant de séparer la graine du coton de sa fibre très rapidement) il y a eu un grand besoin de main-d&amp;rsquo;oeuvre dans les champs de coton (ici main d&amp;rsquo;oeuvre est un euphémisme pour des esclaves), grâce à cela le coton un moteur économique aux États-Unis grâce et la raison
pourquoi le Sud ne voulait pas l&amp;rsquo;abolition de l&amp;rsquo;esclavage dont il dépendant temps, ce qui conduisit à la guerre civile)&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;confortable&lt;/li&gt;
&lt;li&gt;Pas cher&lt;/li&gt;
&lt;li&gt;Respirant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aborbant: retient sueur et plus long à sécher (il parait que ça peut retenir jusqu&amp;rsquo;à 25 fois son poids en eau)&lt;/li&gt;
&lt;li&gt;Prend plus facilement en feu (dans le cas où tu devrais sauter par dessus une corde en feu, c&amp;rsquo;est une information utile!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;À éviter: car il peut être porté autour de 1 journée avant qu&amp;rsquo;il commence à sentir et comme il prend du temps à sécher (pas possible en 1 nuit) ça, complique la chose!
De plus comme il est très absorbant dans les journées chaudes la sueur va rester&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;le-polyester-coolmax-dri-fit&#34;&gt;Le polyester (CoolMax, Dri-FIT&amp;hellip;)&lt;/h2&gt;

&lt;p&gt;Le polyester une fibre synthétique (dans le sens artificiel aka crée par l&amp;rsquo;homme) à base de pétrole (plastique). Il est souvent utilisé par les vêtements de sports et
manteau, car il est possible de faire en sorte qu&amp;rsquo;il soit résistant à l&amp;rsquo;eau, au vent&amp;hellip;&lt;/p&gt;

&lt;p&gt;Il n&amp;rsquo;est pas rare de le voir mélanger à d&amp;rsquo;autres tissus: le linge de sport (souvent avec nylon)&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Durable&lt;/li&gt;
&lt;li&gt;Sèche rapidement&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Moisture Wicking&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Favorable au développement des bactéries (aka: odeur!)&lt;/li&gt;
&lt;li&gt;Pas toujours très respirant
Conclusion:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Pour les budgets: bien qu&amp;rsquo;il accumule rapidement les odeurs, au moins il va être en mesure de sécher en 1 nuit! Aussi il aide à disperser l&amp;rsquo;humidité!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;laine-de-mérinos&#34;&gt;Laine de mérinos&lt;/h2&gt;

&lt;p&gt;Tout d&amp;rsquo;abord la laine est un textile (matériau susceptible d&amp;rsquo;être tissé) obtenu d&amp;rsquo;animaux (souvent le mouton). La laine de mérinos indique qu&amp;rsquo;il est
récolté de la race de Merino (mouton originaire d&amp;rsquo;espagne mais aujourd&amp;rsquo;hui domestiqué en Australie). Il s&amp;rsquo;agit d&amp;rsquo;un tissu que grâce à ces propriétés
naturelles possèdent plein de qualités recherchées: il s&amp;rsquo;agit donc d&amp;rsquo;un tissu haut de gamme.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Régule la température du corps (si contre la peau!)
  Son ondulation naturelle ainsi que la composition du poil permettent d&amp;rsquo;emprisonner de l&amp;rsquo;air: qui agit comme couche isolation (idéal pour l&amp;rsquo;hiver)
  Lorsqu&amp;rsquo;il fait chaud, l&amp;rsquo;humidité gardée va s&amp;rsquo;évaporer et dans ce processus refroidir l&amp;rsquo;air entre la peau et le tissu&lt;/li&gt;
&lt;li&gt;Ne permet pas les bactéries odorantes de se développer (grâce aux lanolines (sorte de graisse) que la laine possède)(peut être porter plusieurs jours)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Moisture Wicking&amp;rdquo; (la laine peut absorber 30% de son poids en eau et avoir l&amp;rsquo;air sec (et en plus in ne perd pas sa chaleur, lorsque mouillée))&lt;/li&gt;
&lt;li&gt;Sèche relativement rapidement (longue nuit)&lt;/li&gt;
&lt;li&gt;Résistant au feu!&lt;/li&gt;
&lt;li&gt;Confortable (le facteur &amp;ldquo;itchiness&amp;rdquo; provient avec le diamètre des fibres, heureusement la laine de mérinos est beaucoup plus fine que les autres donc ils sont plus
flexible et prennent la forme de la peau)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cher!&lt;/li&gt;
&lt;li&gt;Pas aussi durable que le coton&lt;/li&gt;
&lt;li&gt;Demande délicatesse à laver-sécher&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;L&amp;rsquo;idéal pour le backpacking (pouvoir porter un vêtement plusieurs jours)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;lin&#34;&gt;Lin&lt;/h2&gt;

&lt;p&gt;Le lin provient comme du coton d&amp;rsquo;une plate (le lin cultivé (&lt;a href=&#34;https://fr.wikipedia.org/wiki/Lin_cultiv%C3%A9&#34;&gt;je ne vous niaise pas&lt;/a&gt;)). IL est
connu pour être plus solide que le coton, sécher plus vite et à prévenir la croissance de bactérie (raison pourquoi il est souvent utilisé
comme serviette de bain, linge à vaisselle&amp;hellip;)&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parfois confortable (dépend qualité et donc souvent $$$)&lt;/li&gt;
&lt;li&gt;Très respirants   * Durable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se froisse très facilement&lt;/li&gt;
&lt;li&gt;Cher!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;À éviter: car se froisse très facilement ce qui n&amp;rsquo;est pas l&amp;rsquo;idéal dans les valises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.rei.com/learn/expert-advice/travel-clothing.html&#34;&gt;REI: Travel Clothing&lt;/a&gt;
&lt;a href=&#34;http://cottonmill.com/blog/are-all-denim-blue-jeans-made-of-100-cotton/&#34;&gt;Information sur les jeans (en anglais)&lt;/a&gt;
&lt;a href=&#34;http://www.civilwar.org/resources/civil-war-history-how-the.html&#34;&gt;Cotton et guerre civile (en anglais)&lt;/a&gt;
&lt;a href=&#34;http://www.howstuffcompares.com/doc/c/cotton-vs-polyester.htm&#34;&gt;Cotton Versus Polyester&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=Q3ENXsBnZjY&#34;&gt;How &amp;ldquo;Wicking Material&amp;rdquo; Athletic Clothes Work&lt;/a&gt;
&lt;a href=&#34;http://www.businessinsider.com/how-wrinkle-free-cotton-was-invented-2015-9&#34;&gt;How wrinkle-free cotton was invented.&lt;/a&gt;
&lt;a href=&#34;http://undertheyewtree.com/best-fabrics-for-travel/&#34;&gt;Best fabrics for travel&lt;/a&gt;
&lt;a href=&#34;http://www.differencebetween.com/difference-between-cotton-and-vs-linen/&#34;&gt;Cotton vs Linen&lt;/a&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Merino&#34;&gt;Merino (site neutre (pas commercial))&lt;/a&gt;
&lt;a href=&#34;http://www.smartwool.com/discover/why-merino-wool/merino-wool-101.html&#34;&gt;Laine de mérinos (site pas neutre)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Le système de couche</title>
      <link>http://helloworldeverything.com/2017/01/le-syst%C3%A8me-de-couche/</link>
      <pubDate>Sat, 14 Jan 2017 10:47:21 -0500</pubDate>
      
      <guid>http://helloworldeverything.com/2017/01/le-syst%C3%A8me-de-couche/</guid>
      <description>&lt;p&gt;Lorsqu&amp;rsquo;on commence à chercher sur les vêtements d&amp;rsquo;extérieur, on constate rapidement que les magasins les trient
souvent selon un système de couche (e.g.: base-layer, mid-laver,&amp;hellip;). Bien qu&amp;rsquo;il est facile de comprendre le
principe de base, ce post vise à aller un peu plus loin pour bien distinguer le rôle de chacun et surtout savoir
si on en a besoin!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;!--TOC--&gt; 

&lt;h1 id=&#34;tlrd&#34;&gt;TLRD&lt;/h1&gt;

&lt;p&gt;Voici une schéma qui résume bien:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Base-layer: Chasser l&amp;rsquo;humidité&lt;/li&gt;
&lt;li&gt;Mid-layer: Garder au chaud (isolation)&lt;/li&gt;
&lt;li&gt;Outer-layer: Protection contre les éléments

&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/layering_system_diagram.jpg&#34; alt=&#34;Diagram du système de couche&#34; /&gt;
(Image tiré de &lt;a href=&#34;http://www.gooutdoors.co.uk/expert-advice/layering-system-guide&#34;&gt;ce guide&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&#34;comprendre-les-différentes-couches&#34;&gt;Comprendre les différentes couches&lt;/h1&gt;

&lt;p&gt;Pour chaque couche, on va analyser le but de la coucher ainsi que tel type de vêtement ou tissue peut combler ce rôle.&lt;/p&gt;

&lt;h2 id=&#34;base-layer&#34;&gt;Base Layer&lt;/h2&gt;

&lt;p&gt;C&amp;rsquo;est la couche qui est directement en contact avec la peau.&lt;/p&gt;

&lt;p&gt;Pour plus de détail aller lire l&amp;rsquo;article sur les &lt;a href=&#34;http://helloworldeverything.com/2017/01/comprendre-les-tissues/&#34;&gt;types de tissue&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;objectif&#34;&gt;Objectif&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Garder au sec (moisture wickering)&lt;/li&gt;
&lt;li&gt;Réguler température du corps&lt;/li&gt;
&lt;li&gt;Confortable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;considération&#34;&gt;Considération&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ajustée au corps: garde une certaine isolation&lt;/li&gt;
&lt;li&gt;Possède-t-il des zippers pour aider à ajuster si on a chaud ou froide&lt;/li&gt;
&lt;li&gt;L&amp;rsquo;épaisseur (souvent même si on va dans environnement froid on préfère un vêtement mince, car si on bouge beaucoup on peut avoir chaud)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recommendation&#34;&gt;Recommendation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Cotton:&lt;/strong&gt; À éviter&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/cotton_shirt.jpg&#34; alt=&#34;T-Shirt de Coton&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retient l&amp;rsquo;humidité: avoir de l&amp;rsquo;eau proche de la peau refroidit beaucoup!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Synthétique:&lt;/strong&gt; Recommendé.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/synthetique_shirt.jpg&#34; alt=&#34;T-Shirt de Synthétique&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pro:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Évacue l&amp;rsquo;humidité.&lt;/li&gt;
&lt;li&gt;Sèche rapidement .&lt;/li&gt;
&lt;li&gt;Durable.&lt;/li&gt;
&lt;li&gt;Abordable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contre:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Développent rapidement des odeurs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Laine:&lt;/strong&gt; Recommendé.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/wool_shirt.jpeg&#34; alt=&#34;Wool shirt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pro:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meilleur isolation dans température froide.&lt;/li&gt;
&lt;li&gt;Polyvalent (confortable tant en température chaude que froide).&lt;/li&gt;
&lt;li&gt;Continue d&amp;rsquo;isoler même si mouillé.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contre:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Laine de mérinos coûte cher.&lt;/li&gt;
&lt;li&gt;Plus fragile (surtout si se frotte contre surface rugueuse comme en escalade).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;insulation-mid-layer&#34;&gt;Insulation / Mid Layer&lt;/h2&gt;

&lt;p&gt;Cette couche dépend beaucoup de la température, on pourrait même devoir porter plusieurs mid-layer.
Parfois on peut les utiliser comme couche extérieure, dépendant de la température.&lt;/p&gt;

&lt;h3 id=&#34;objectif-1&#34;&gt;Objectif&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Garder au chaud&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;considération-1&#34;&gt;Considération&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ajustée au corps: compromis entre surplus de poids (vêtement ample) et être capable de bien bouger.&lt;/li&gt;
&lt;li&gt;La caractéristique du vêtement (e.g: les poches, hauteur du collet, si la taille ou poignet sont ajustables, capuchons, trous pour les pouces)&lt;/li&gt;
&lt;li&gt;Le ratio chaleur/poids&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recommendation-1&#34;&gt;Recommendation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Fleece/Manteau polaire&lt;/strong&gt;: Pratique pour les sessions de sport.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/fleece.jpg&#34; alt=&#34;Manteau Polaire&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Fibre synthétique qui cherche à reproduire les qualités de la laine.&lt;/p&gt;

&lt;p&gt;Étant perméable à l&amp;rsquo;air et respirant, il est aussi pratique pour les sessions d&amp;rsquo;activités quand il fait beau.&lt;/p&gt;

&lt;p&gt;Pour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Économique&lt;/li&gt;
&lt;li&gt;Très respirant&lt;/li&gt;
&lt;li&gt;Sèche rapidement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contre:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faible ratio chaleur/poids (existe des chauds, mais plus lourd!)&lt;/li&gt;
&lt;li&gt;Pas résistant au éléments (ne coupe pas le vent)(pas un stand-alone)&lt;/li&gt;
&lt;li&gt;Pas compressible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Down jacket&lt;/strong&gt;: Idéal pour les activités non sportives dans une température froide et sec.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/down_jacket.jpg&#34; alt=&#34;Down Jacket&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Utilise des plumes ou du duvet provenant d&amp;rsquo;animaux.&lt;/p&gt;

&lt;p&gt;Pour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meilleur ratio chaleur/poids&lt;/li&gt;
&lt;li&gt;Très compressible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contre:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perd rapidement sa chaleur si mouillée * Dispendieux&lt;/li&gt;
&lt;li&gt;Plus fragile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Synthetic down jacket&lt;/strong&gt;: Compromis entre chaleur et résistance à l&amp;rsquo;humidité&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/synthetic_down_jacket.jpg&#34; alt=&#34;Synthetic Down Jacket&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Similaire au down jacket mais utilise dy synthétique au lieu du matériel d&amp;rsquo;animaux.&lt;/p&gt;

&lt;p&gt;Pour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Très bon ratio chaleur/poids&lt;/li&gt;
&lt;li&gt;Préserve chaleur même si mouillé * Léger&lt;/li&gt;
&lt;li&gt;Sèche rapidement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contre:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Le niveau de respirabilité dépend beaucoup du modèle (et donc du $$$)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hoodie/Veste de cotton&lt;/strong&gt;: Parfait pour tout les jours&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/hoodie.jpg&#34; alt=&#34;Hoodie&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vêtement orienté vers le casual et mode, ce n&amp;rsquo;est pas un vêtement de performance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Va retenir l&amp;rsquo;humidité que ce qui va causer qu&amp;rsquo;on va avoir froid!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;outer-layer&#34;&gt;Outer layer&lt;/h2&gt;

&lt;h3 id=&#34;objectif-2&#34;&gt;Objectif&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Protéger contre les éléments de la nature (pluie et vent)&lt;/li&gt;
&lt;li&gt;Permet encore d&amp;rsquo;évacuer l&amp;rsquo;humidité&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;considération-2&#34;&gt;Considération&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Dépend énormément de la température et des intempéries possibles&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recommendation-2&#34;&gt;Recommendation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hard Shell&lt;/strong&gt;: Idéal pour les environnements constamment humides (pluie ou neige)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/hard_shell.jpg&#34; alt=&#34;Hard Shell&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Type de veste qui fournit la meilleure protection contre les intempéries.&lt;/p&gt;

&lt;p&gt;Pour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Imperméable&lt;/li&gt;
&lt;li&gt;Coupe vent&lt;/li&gt;
&lt;li&gt;Respirant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contre:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cher!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Soft Shell&lt;/strong&gt;: Pour les temps plus cléments
&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/soft_shell.jpg&#34; alt=&#34;Soft Shell&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Type de veste utilisé pour les temps plus cléments en termes d&amp;rsquo;intempéries. Il est en mesure
de garder une température confortable même durant les périodes d&amp;rsquo;effort.&lt;/p&gt;

&lt;p&gt;Pour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perméable à l&amp;rsquo;air&lt;/li&gt;
&lt;li&gt;Bonne respirabilité&lt;/li&gt;
&lt;li&gt;Flexible et confortable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contre:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pas waterproof&lt;/li&gt;
&lt;li&gt;Pas coupe-vent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Imperméable (rain jacket)&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/rain_jacket.jpg&#34; alt=&#34;Rain Jacket&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coupe vent (wind shell)&lt;/strong&gt;: Quand il faut chaud mais que le vent est froid&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/wind_shell.jpg&#34; alt=&#34;Wind Shell&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alternative est de prendre un mid-layer avec résistance au vent&lt;/p&gt;

&lt;h1 id=&#34;alternative&#34;&gt;Alternative&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Ski-jacket&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/systeme_couche/ski_jacket.jpg&#34; alt=&#34;Ski Jacket&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;quelle-couche-quand&#34;&gt;Quelle couche quand?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.outdoorgearlab.com/a/11070/How-to-Layer-Clothing-for-Each-Season&#34;&gt;http://www.outdoorgearlab.com/a/11070/How-to-Layer-Clothing-for-Each-Season&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;ressources&#34;&gt;Ressources&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://fr.wikipedia.org/wiki/Polaire_(textile)&#34;&gt;Wiki sur le textile polaire&lt;/a&gt;
&lt;a href=&#34;http://www.gooutdoors.co.uk/expert-advice/layering-system-guide&#34;&gt;Guide pour le système de couche par go-outdoors&lt;/a&gt;
&lt;a href=&#34;http://knowledge.cotswoldoutdoor.com/c/layering-system-guide/&#34;&gt;Guide pour le système de couche par knowledge&lt;/a&gt;
&lt;a href=&#34;https://www.mec.ca/en/explore/clothing-layers&#34;&gt;Guide pour le système de couche par MEC&lt;/a&gt;
&lt;a href=&#34;http://www.outdoorgearlab.com/a/11061/Introduction-to-Layered-Clothing-Systems&#34;&gt;Introduction au système de couches&lt;/a&gt;
&lt;a href=&#34;http://thenextchallenge.org/insulating-midlayers/&#34;&gt;Comparaison des Mid-layer&lt;/a&gt;
&lt;a href=&#34;http://www.switchbacktravel.com/best-midlayers&#34;&gt;Palmares de mid-layer&lt;/a&gt;
&lt;a href=&#34;http://www.arcteryx.com/HardshellvsSoftshell.aspx?country=ca&amp;amp;language=fr&#34;&gt;Hardshell vs Softshell&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Préparation à voyager en ultra léger!</title>
      <link>http://helloworldeverything.com/2016/12/pr%C3%A9paration-%C3%A0-voyager-en-ultra-l%C3%A9ger/</link>
      <pubDate>Fri, 02 Dec 2016 06:53:47 -0500</pubDate>
      
      <guid>http://helloworldeverything.com/2016/12/pr%C3%A9paration-%C3%A0-voyager-en-ultra-l%C3%A9ger/</guid>
      <description>&lt;p&gt;Post regroupant plusieurs informations qui m&amp;rsquo;ont été utiles lors de ma préparation à mon voyage d&amp;rsquo;un mois en ultra-léger en Thailand.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Avertissement: bien que je n&amp;rsquo;ai jamais fait de voyage ultra-léger, je suis entrain d&amp;rsquo;en préparer un! Rapidement on se perd dans la quantité de ressource
en ligne, quel type de vêtement acheter (le tissue), qu&amp;rsquo;est ce que je dois apporter et laisser à la maison&amp;hellip; Ce post agit donc pour agréger les différents
conseils, techniques et information que j&amp;rsquo;ai trouvé durant ma préparation à mon voyage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lectures préalables:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://helloworldeverything.com/2017/01/comprendre-les-tissues/&#34;&gt;Post sur les types de tissues&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://helloworldeverything.com/2017/01/le-syst%C3%A8me-de-couche/&#34;&gt;Post sur le système de couche&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Liste todo:
* Ajouter jeu (image objet et est ce utile ou non)
* Différente utilité d&amp;rsquo;un objet
* Donner un ordre entre les différents articles
* Ajouter vidéo ou citation de d&amp;rsquo;autre cite&lt;/p&gt;

&lt;!-- toc --&gt;

&lt;h1 id=&#34;pourquoi&#34;&gt;Pourquoi&lt;/h1&gt;

&lt;p&gt;(todo)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Moins de poids à transporter et 1 seul petit sac = plus facile se déplacer (accès à plus de type de tranport (ex: scooter)) sur de plus longue période&lt;/li&gt;
&lt;li&gt;Pas besoins de check-in ses valises à l&amp;rsquo;aéroport = moins de stress de perdre ses bagages, moins de temps perdu d&amp;rsquo;attente&lt;/li&gt;
&lt;li&gt;Moins de stock = moins de stress de tout perdre (celui la je ne suis pas sûr à 100% car souvent le peu de stock sont de qualité et donc dispendieux!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;principe-de-base&#34;&gt;Principe de base&lt;/h1&gt;

&lt;p&gt;Dans sa préparation de sa liste de voyage, voici la mentalité qu&amp;rsquo;on semble devoir avoir, il peut être vue comme 3 étapes ou 3 tests pour décider si on devrait
apporter cet objet X ou non.&lt;/p&gt;

&lt;h2 id=&#34;1-amener-moins&#34;&gt;1. Amener moins&lt;/h2&gt;

&lt;p&gt;C&amp;rsquo;est le principe de base de ce type de voyage: le meilleur moyen que tout rentre dans un petit sac à dos est tout simplement d&amp;rsquo;apporter moins de chose!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: Duh! Dit moi donc quelque chose que je ne sais pas!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok! Ok! Voici quelques trucs:&lt;/p&gt;

&lt;h3 id=&#34;éviter-d-apporter-quelque-chose-juste-au-cas-où&#34;&gt;Éviter d&amp;rsquo;apporter quelque chose &amp;ldquo;juste au cas où&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;Car ca s&amp;rsquo;aditionne rapidement(ainsi que le poids) et on risque fort bien de ne jamais l&amp;rsquo;utiliser! (au pire il est possible de l&amp;rsquo;acheter la bas!)&lt;/p&gt;

&lt;h3 id=&#34;favoriser-les-objets-polyvalents&#34;&gt;Favoriser les objets polyvalents:&lt;/h3&gt;

&lt;p&gt;Préférer apporter 1 objet qui peut faire 2 choses au lieu de 2 objet qui peuvent n&amp;rsquo;en faire que 1.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vêtement qui peut être porter pour différente occasion: ex: chemise peut être décontractée en journée et habillée en soirée!&lt;/li&gt;
&lt;li&gt;Utiliser la technique de couche d&amp;rsquo;oigon: plus il fait froid plus on rajoute des couches (au lieu d&amp;rsquo;avoir un manteau par tranche de température)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tous les vêtements doivent pouvoir s&amp;rsquo;assortir entre eux&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avec peu de vêtement, il faut avoir accès à toutes les combinaisons possibles si on ne veut pas forcer à toujours porter la même chose&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Un truc est de choisir des couleurs neutres (noir, blanc, beige)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://helloworldeverything.com/img/travel/neutral_color.PNG&#34; alt=&#34;Exemple de couleur neutre&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-réduire-le-poids-des-objets-qui-ont-passé-le-premier-test&#34;&gt;2. Réduire le poids des objets qui ont passé le premier test&lt;/h2&gt;

&lt;p&gt;C&amp;rsquo;est souvent l&amp;rsquo;étape qui fait monter les prix: souvent si on veut la même qualité mais pour une fraction du poids, c&amp;rsquo;est le prix qui monte!
La bonne nouvelle est puisqu&amp;rsquo;on on trimbale moins de vêtements, il y en a moins à acheter.&lt;/p&gt;

&lt;h2 id=&#34;3-optimiser-le-confort-et-le-design&#34;&gt;3. Optimiser le confort et le design&lt;/h2&gt;

&lt;p&gt;Une fois qu&amp;rsquo;on a une liste des objets (avec leur caractéristique  (par exemple: il me faut un t-shirt en mérino de couleur neutre pâle)) à acheter
(ou à choisir parmis son garde-robe), on doit avoir des outils pour faire un choix parmis toutes les possibilités (marque, modèle, &amp;hellip;)&lt;/p&gt;

&lt;p&gt;Il existe 2 critères simples qui aident à faire ce choix: lequel est le plus confortable et lequel à le meilleur design (niveau esthétique et aussi
fonctionnalité (poches, zipper,&amp;hellip;))&lt;/p&gt;

&lt;p&gt;(lecture:
&lt;a href=&#34;http://www.moimessouliers.org/guide-faire-vos-bagages-voyager-leger/&#34;&gt;http://www.moimessouliers.org/guide-faire-vos-bagages-voyager-leger/&lt;/a&gt;
&lt;a href=&#34;http://snarkynomad.com/ultimate-ultralight-travel-packing-list/&#34;&gt;http://snarkynomad.com/ultimate-ultralight-travel-packing-list/&lt;/a&gt;
&lt;a href=&#34;http://jamesclear.com/ultralight-travel&#34;&gt;http://jamesclear.com/ultralight-travel&lt;/a&gt;
&lt;a href=&#34;http://lesacados.com/voyager-ultra-leger-minimaliste&#34;&gt;http://lesacados.com/voyager-ultra-leger-minimaliste&lt;/a&gt;
&lt;a href=&#34;http://lesacados.com/vetements-materiel-pour-un-voyage-autour-du-monde&#34;&gt;http://lesacados.com/vetements-materiel-pour-un-voyage-autour-du-monde&lt;/a&gt;
)&lt;/p&gt;

&lt;h1 id=&#34;site-ressource-ou-simplement-interessant&#34;&gt;Site ressource ou simplement interessant&lt;/h1&gt;

&lt;h2 id=&#34;les-plus-intéressant&#34;&gt;Les plus intéressant&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://lesacados.com/&#34;&gt;Blog d&amp;rsquo;un globtrotteur voyageant en sac à dos offrant plein de conseil&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=Mp8l1mWtAGo&#34;&gt;tdlr&lt;/a&gt;
* Vidéo (en anglais) expliquant sa liste de bagage
* Technique de pliage
* J&amp;rsquo;aime pas l&amp;rsquo;idée des jeans
&lt;a href=&#34;https://www.youtube.com/watch?v=hFYhNKuyw2g&#34;&gt;tdlr #2&lt;/a&gt;
&lt;a href=&#34;http://jamesclear.com/ultralight-travel&#34;&gt;Guide (en anglais) spécifiquement sur le ultra-léger&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;autres&#34;&gt;Autres&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tynan.com/gear2016&#34;&gt;Belle liste&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blogger avec hugo</title>
      <link>http://helloworldeverything.com/2016/11/blogger-avec-hugo/</link>
      <pubDate>Thu, 17 Nov 2016 18:04:28 -0500</pubDate>
      
      <guid>http://helloworldeverything.com/2016/11/blogger-avec-hugo/</guid>
      <description>&lt;p&gt;Mon aventure de commencer à bloguer en utilisant Hugo et résumé des aspects importants et à ne pas oublier lorsqu&amp;rsquo;on l&amp;rsquo;utilise.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;aperçue&#34;&gt;Aperçue&lt;/h1&gt;

&lt;p&gt;Ce post est revu des différentes capacités de Hugo, je pense qu&amp;rsquo;il est utile pour savoir comment bien utiliser Hugo ainsi que
des petits détails utiles (par exemple je ne savais pas que Hugo offrait une table des matières intégrés)&lt;/p&gt;

&lt;!-- toc --&gt;

&lt;h1 id=&#34;début-de-l-aventure&#34;&gt;Début de l&amp;rsquo;aventure&lt;/h1&gt;

&lt;p&gt;Au moment où j&amp;rsquo;ai décidé de commencer à vouloir bloger, pour plusieurs raisons (voir autre post), j&amp;rsquo;ai d&amp;rsquo;abord du trouver une plateforme qui
rapidement me permettrait de commencer à écrire. J&amp;rsquo;avais quelque critère:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compatible avec gh-pages: donc un site web statique (sans serveur)&lt;/li&gt;
&lt;li&gt;Facile à configurer et setup&lt;/li&gt;
&lt;li&gt;Plusieurs options de customization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Après quelque recherche je devais choisir entre Jykyll qui à un support officiel avec gh-pages et hugo qui semblait avoir le hype dans les voiles.
Puisque jekyll demandait ruby et j&amp;rsquo;étais tros paresseux pour setup cela, j&amp;rsquo;ai choisi hugo qui contient un executable: easy peasy!&lt;/p&gt;

&lt;p&gt;Après plusieurs heures à regarder les différents thèmes possible: mon objectif pour le blog n&amp;rsquo;était pas d&amp;rsquo;être un spécialiste du css, je voulais
profiter le travail d&amp;rsquo;un autre. Finalement j&amp;rsquo;ai du changer plusieurs fois: ce qui demande toujours quelque configuration&amp;hellip; hurhghghg!&lt;/p&gt;

&lt;p&gt;Bref considérant cette partie volatile et suptile au changement je me suis mis en quête de comprendre les concepts de base de Hugo qui sont réutilisables
peu importe le thème. Alors voilà pourquoi j&amp;rsquo;écris ce post!&lt;/p&gt;

&lt;p&gt;Tout d&amp;rsquo;abord, je compte sur le fait que vous avez au moins lue le &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;tutoriel officiel&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;les-bases&#34;&gt;Les bases&lt;/h1&gt;

&lt;p&gt;Ce qu&amp;rsquo;il faut savoir pour profiter à 80% des fonctionnalités de Hugo&lt;/p&gt;

&lt;h2 id=&#34;organisation-et-sections&#34;&gt;Organisation et sections&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/content/organization/&#34;&gt;Documentation officiel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugo ne supporte pas seulement le contenu de &amp;ldquo;post&amp;rdquo;, il peut supporté d&amp;rsquo;autres types comme des quotes. Ces différents types ont le nom de sections et
on les retrouves au premier niveau sous le dossier content. L&amp;rsquo;organisation de notre contenu est donc très visuel ce qui est agréable. Bien sur tout
est modifiable avec le &lt;a href=&#34;#front-matter&#34;&gt;Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└── content
    ├── post // section #1
    |   ├── firstpost.md   // &amp;lt;- http://[...].com/post/firstpost/
    |   ├── happy
    |   |   └── ness.md  // &amp;lt;- http://[...].com/post/happy/ness/
    |   └── secondpost.md  // &amp;lt;- http://[...].com/post/secondpost/
    └── quote // section #2
        ├── first.md       // &amp;lt;- http://[...].com/quote/first/
        └── second.md      // &amp;lt;- http://[...].com/quote/second/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: Ok, c&amp;rsquo;est bien beau avoir des sections et différents types de contenu mais qu&amp;rsquo;est ce que ca change?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ayant des types on peut créer des &lt;a href=&#34;#archetype&#34;&gt;archetype&lt;/a&gt; et &lt;a href=&#34;#template&#34;&gt;templates&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;front-matter&#34;&gt;Front Matter&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR : Hummm, ca semble être le début d&amp;rsquo;une mauvaise blague. Dans tous les cas, ma position est que tout matter!!!&lt;/p&gt;

&lt;p&gt;PM: &amp;hellip; est ce que tu te trouves drôles FMORR, je pensais qu&amp;rsquo;avec l&amp;rsquo;âge viendrait la sagesse&amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bref de plaisanterie! Front Matter veut tout simplement dire qu&amp;rsquo;i lest possible d&amp;rsquo;ajouter du meta-data à notre contenu.&lt;/p&gt;

&lt;p&gt;Il supporte différent format:
* TOML: identifié avec &amp;lsquo;+++&amp;rsquo; qui utilise des =
* YAML: identifié avec &amp;lsquo;&amp;mdash;&amp;rsquo; qui utilise des :
* JSON: qui est tout simplement un object JSON&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: Ok! À quoi ca sert maintenant?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Les pairs variables-valeurs sont accesible dans les templates. Par exemple on voudrait que le titre du post soit écrit en taille 40 dans la page du post
et en taille 10 sur la page qui montres tous les posts disponibles&lt;/p&gt;

&lt;p&gt;(todo: ajouter photo)&lt;/p&gt;

&lt;h3 id=&#34;variables-intéressantes&#34;&gt;Variables intéressantes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;title: Titre du contenu (duh!)&lt;/li&gt;
&lt;li&gt;description: Description du contenu&lt;/li&gt;
&lt;li&gt;date: Date utilisé pour trier les posts&lt;/li&gt;
&lt;li&gt;taxonomies: &lt;a href=&#34;#taxonomies&#34;&gt;Voir prochaines sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;draft: Si brouillon normalement on ne veut pas le rendre visible (à moins d&amp;rsquo;avoir des bas standards et que de seulement montrer de quoi qu&amp;rsquo;on est fier est pas dans nos valeurs)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;résumé&#34;&gt;Résumé&lt;/h3&gt;

&lt;p&gt;Par défaut hugo, prend les 70 premiers mots du post et les mets dans la variable summary. Ce que je trouve donne souvent des résultats peu désirable: les premiers mots d&amp;rsquo;un texte
sont rarement le parfait résumé qu&amp;rsquo;on en ferais. Heureusement, il est possible de le spécifier et en plus il permet d&amp;rsquo;utiliser le formatage HTML!&lt;/p&gt;

&lt;p&gt;Il suffit d&amp;rsquo;ajouter le résumé à la fin du Front Matter et lorsqu&amp;rsquo;on a finit de l&amp;rsquo;écrire on ajoute: &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;---
title : &amp;quot;Legit post&amp;quot;
tags : [&amp;quot;serious&amp;quot;, &amp;quot;potato&amp;quot;, &amp;quot;pls take me au sérieux&amp;quot;] 
categories : [&amp;quot;demo&amp;quot;]
date : &amp;quot;2016-11-17&amp;quot; 
---

Résumé du post: bla bla bla bla potato bla bla bla bla

&amp;lt;!--more--&amp;gt; 

Reste du texte
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;archetype&#34;&gt;Archetype&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR : Damn si ca se rapproche tant soit peu d&amp;rsquo;un archnemesis, hugo vient monter d&amp;rsquo;une coche en terme de coolitude&lt;/p&gt;

&lt;p&gt;PM: &amp;hellip; hélas non: le arche devant le mot type signifie seulement que c&amp;rsquo;est le modèle du type. Mais FMI la différence le mot arch devant ennemie provient du grec &amp;ldquo;arkhos&amp;rdquo; qui
signifie &amp;ldquo;le plus important&amp;rdquo;, et la différence entre un ennemie et un némésis et une référence à la déesse grec de la juste colère et de la rétribution céleste qui est utilisé
par antonomase pour signifier la force vengeresse. On pourrait dire que plusieurs peuvent vaincre leur ennemie mais peu peuvent échapper leur nemesis! &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bref&amp;hellip;. il permet de déclarer les variables de front matter par défaut pour un type de contenue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└── archetypes
    ├── default.md // Le modèle utilisé si pas de modèle plus spécialisé pour un type
    ├── post.md // Le modèle utilisé pour le type de contenu &amp;quot;post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: Comment utiliser ces valeurs par défaut?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Il suffit d&amp;rsquo;utiliser la commande new de hugo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new [type conteny]/[path]/my-new-content.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;les-thèmes&#34;&gt;Les thèmes&lt;/h1&gt;

&lt;p&gt;Pour accélérer le démarage d&amp;rsquo;un blog il n&amp;rsquo;y a pas mieux que de partir d&amp;rsquo;un thème: il va tout styler ton site pour qu&amp;rsquo;il soit responsive, beau, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Un des plus grand problème est qu&amp;rsquo;il y a telement de &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;choix&lt;/a&gt;! Et que chacun demande une petite configuration initial.&lt;/p&gt;

&lt;h2 id=&#34;pour-utiliser-un-thème&#34;&gt;Pour utiliser un thème&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;PM: Dans tousles showcase il le rapelle mais juste au cas où!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Télécharger le thème désiré&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd themes
git clone URL_TO_THEME
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Indiquer à Hugo quel thème utilisé (puisqu&amp;rsquo;on peut en télécharger plusieurs)&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;On peut utiliser la ligne de commande&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo -t ThemeName
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Ou le set nous même dans le fichier config&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;theme: &amp;quot;ThemeName&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tweek-le-thème&#34;&gt;Tweek le thème&lt;/h2&gt;

&lt;p&gt;Il m&amp;rsquo;est rapidement arrivé que je voulais tweeker un peu le thème. Il serait une mauvaise idée de le modifier directement dans le dossier thème puisque que s&amp;rsquo;il y a une mise
à jour nos modifications vont être effacé!&lt;/p&gt;

&lt;p&gt;Le principe est donc de remplacer les templates, fichiers statiques ou archetypes à partir du répertoire de base (pas de theme). Si même nom de fichier dans même sous-arboresence
Hugo va d&amp;rsquo;abord sélectionner le notre.&lt;/p&gt;

&lt;p&gt;Par exemple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/layouts/_default/single.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Va remplacer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/themes/themename/layouts/_default/single.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;template&#34;&gt;Template&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;PM : C&amp;rsquo;est les template qui permet de constuire simplement un site web complexe et riche en ressource.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Il existe 4 types important de template:
* Single: Pour visualiser un type de contenu
* List: Pour visualiser plusieurs morceau de contenus (ex: montrer tous les posts)
* Homepage: Code pour la Home Page du site (&amp;hellip;)
* Partial: Permet de séparer des morceaux de code et les ré-utiliser à de multiples endroits&lt;/p&gt;

&lt;h1 id=&#34;taxonomies&#34;&gt;Taxonomies&lt;/h1&gt;

&lt;p&gt;Pour faire simple, il s&amp;rsquo;agit une façon de classifié le contenu. Par exemples tags, categories, series sont des taxonomies.&lt;/p&gt;

&lt;h1 id=&#34;les-extras&#34;&gt;Les extras&lt;/h1&gt;

&lt;p&gt;Pour les utilisations plus avancés et les configurations plus poussés.&lt;/p&gt;

&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;

&lt;p&gt;Il est fort probable qu&amp;rsquo;on désire pouvoir offrir la chance aux lecteurs d&amp;rsquo;écrire leur commentaire constructif, heureusement pour combler le problème qu&amp;rsquo;on n&amp;rsquo;a pas de backend
Hugo est compatible avec &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; un service externe qui ajoute la fonctionnalités de commenter. Il suffit de s&amp;rsquo;inscrire et d&amp;rsquo;ajouter au Front Matter quel
id de Disqus il doit utiliser.&lt;/p&gt;

&lt;h2 id=&#34;shortcodes&#34;&gt;Shortcodes&lt;/h2&gt;

&lt;p&gt;Puisque le Markdown ne supporte par tout les fonctionnalités qu&amp;rsquo;on voudrait, Hugo offre la possibilité de créer des snippets de code qui va être utilisé lorsqu&amp;rsquo;il va générer l&amp;rsquo;affichage.&lt;/p&gt;

&lt;p&gt;Hugo offre plusieurs shortcode déjà intégré: il suffit de placer ces codes ci-dessous à l&amp;rsquo;intérieur de {{}}&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Un tweet de tweeter : &amp;lt; tweet id_tweet &amp;gt;&lt;/li&gt;
&lt;li&gt;Vidéo youtube: &amp;lt; youtube id_vidéo &amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;utiliser-un-shortcodes&#34;&gt;Utiliser un shortcodes&lt;/h3&gt;

&lt;p&gt;Supposons qu&amp;rsquo;on veut utiliser la shortcode AwsomeShortcode avec les paramètres param1 et param2 dans notre .md on va écrire:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; AwsomeShortcode param1 param2 &amp;gt;}} 
Autre contenu
{{&amp;lt; /AwsomeShortcode &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ou bien si les paramètres ont des noms (par exemple nom et titre):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; AwsomeShortcode nom=&amp;quot;param1&amp;quot; titre=&amp;quot;param2&amp;quot; &amp;gt;}}
Autre contenu
{{&amp;lt; /AwsomeShortcode &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ps: Il est possible d&amp;rsquo;indiquer que notre contenu soit quand même traité avec Markdown avant d&amp;rsquo;être passé au shortcode: il suffit de changer &lt;code&gt;&amp;lt;&lt;/code&gt; et &lt;code&gt;&amp;gt;&lt;/code&gt; par &lt;code&gt;%&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;écrire-un-shortcodes&#34;&gt;Écrire un shortcodes&lt;/h3&gt;

&lt;p&gt;On écrit un fichier .html placé dans layout/shortcodes. Bien qu&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;un simple fichier html il est possible d&amp;rsquo;accéder à différents types de variables et même d&amp;rsquo;ajouter un peu de logique
(par exemple si la variable X a été énoncé mettre une bordure avec la couleur de X): ce qui est à l&amp;rsquo;intérieur de &lt;code&gt;{{}}&lt;/code&gt; va être interpréter par Hugo.&lt;/p&gt;

&lt;p&gt;On peut accéder à plusieurs variables:
* Les paramètres
** Par numéro selon ordre déclaration: &lt;code&gt;{{ .Get 0}}&lt;/code&gt;
** Par nom &lt;code&gt;{{ .Get &amp;quot;titre&amp;quot; }}&lt;/code&gt;
* &lt;a href=&#34;https://gohugo.io/templates/variables/&#34;&gt;Varibles de la page&lt;/a&gt;
** Avec : &lt;code&gt;{{ .Page.[variable name] }}&lt;/code&gt;
* Et le contenu déclarer à l&amp;rsquo;intérieur du shortcodes
** Avec : &lt;code&gt;{{ .Inner }}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-des-matières&#34;&gt;Table des matières&lt;/h2&gt;

&lt;p&gt;Une des fonctionnalités de Hugo que j&amp;rsquo;ai découvert un peu plus tard et qui m&amp;rsquo;aurait épargné du travail est que Hugo est capable de détecter les titres et sous-titres d&amp;rsquo;un post
et de généré la table des matières. Si on écrit un template il faut indiquer qu&amp;rsquo;on utilise la variable &lt;code&gt;.TableOfContents&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;markdown&#34;&gt;Markdown&lt;/h2&gt;

&lt;p&gt;Le markdown à pour but de simplifier l&amp;rsquo;écriture d&amp;rsquo;un post: il permet de définir comment afficher l&amp;rsquo;information&lt;/p&gt;

&lt;p&gt;Hugo utilise &lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;Blackfriday&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;annexe&#34;&gt;Annexe&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;PM: Rappel toi FMORR que la &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;documentation de hugo&lt;/a&gt; est lui même un blog hugo dont on peut regarder le &lt;a href=&#34;https://github.com/spf13/hugo/tree/master/docs&#34;&gt;code source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;*[antonomase] : Figure de style qui consiste à utilisé un nom propre est utilisé comme un nom commun: par exemple un atlas provient en fait de Atlas un géant de la mythologie grecque qui devait porter le monde sur ses épaules&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://www.dailywritingtips.com/on-the-use-of-nemesis/&#34;&gt;Difference ennemie, némésis et arch&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Step by step automatization with gulp</title>
      <link>http://helloworldeverything.com/2016/10/step-by-step-automatization-with-gulp/</link>
      <pubDate>Mon, 17 Oct 2016 18:11:44 -0400</pubDate>
      
      <guid>http://helloworldeverything.com/2016/10/step-by-step-automatization-with-gulp/</guid>
      <description>&lt;p&gt;Hands-on, multi-step exercise to discover gulp. How to automate multiple aspect of a static web page using gulp.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Simple step-by-step to automate the process of a static web page with gulp.&lt;/p&gt;

&lt;h3 id=&#34;goal-of-this-post&#34;&gt;Goal of this post&lt;/h3&gt;

&lt;p&gt;Often after reading a let&amp;rsquo;s get started about a tech, I find my self not sure where to start applying what I learned.
So here is something to get your teeth start on!&lt;/p&gt;

&lt;h4 id=&#34;set-up-todo&#34;&gt;Set-up (todo)&lt;/h4&gt;

&lt;p&gt;Just an other javascript-package&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download this [source code]()&lt;/li&gt;
&lt;li&gt;Install gulp-cli globally&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install gulpjs/gulp-cli -g
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;In the repository install all npm module&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;learning-project&#34;&gt;Learning-project&lt;/h2&gt;

&lt;p&gt;We (you and I) will build a simple project to show some useful capacity of gulp and its pluggins.
For some parts I will write every steps and other parts I will give directive for you to try.
At the end of everystep, I will provided a link to the code source of how I implemented it.&lt;/p&gt;

&lt;p&gt;What the project will do:&lt;br /&gt;
* Compile sass into css and minify them
* Minify and concat javascript file
* Live-reload: when we will change a html, css or js files the browser will automaticly reload and show the changes&lt;/p&gt;

&lt;h3 id=&#34;1-simply-copying-file&#34;&gt;1. Simply copying file&lt;/h3&gt;

&lt;p&gt;Using your knowledge to setup and and how implement simple task and watch, implements a gulpfile able to:&lt;br /&gt;
* Copying javascript from src/js -&amp;gt; build/js
* Copying images from src/img -&amp;gt; build/img
* On &amp;ldquo;gulp watch&amp;rdquo;, watcher should copy files when one is updated or a newer one is add
* On &amp;ldquo;gulp build&amp;rdquo;, should clean build/ then copy js and images&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/PrincessMadMath/hwe_gulp-introduction/tree/1_Copying&#34;&gt;My solution here (todo)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-minify-everything&#34;&gt;2. Minify everything!&lt;/h3&gt;

&lt;p&gt;Ok now you are a pro of moving files and watch some. Now we want to minify everything so it can be production ready.
Your job (if you accept it) is to meet the following criteria:
* Uglify then concat all javascript files
* Compress imagemin&lt;/p&gt;

&lt;p&gt;(todo: change)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;);
var concat = require(&#39;gulp-concat&#39;);
var uglify = require(&#39;gulp-uglify&#39;);
var imagemin = require(&#39;gulp-imagemin&#39;);
var del = require(&#39;del&#39;);

/* Defines globs to target specic files type */
var paths = {
  scripts: [&#39;src/js/**/*.js&#39;, &#39;!src/external/**/*.js&#39;],
  images: &#39;src/img/**/*&#39;
};
 
/* Register some tasks to expose to the cli */
gulp.task(&#39;build&#39;, gulp.series(
                      clean,
                      gulp.parallel(scripts, images)
                    ));
gulp.task(clean);
gulp.task(watch);
 
// The default task (called when you run `gulp` from cli) 
// Will build then watch for changes
gulp.task(&#39;default&#39;, gulp.series(&#39;build&#39;, watch));
 
 
/* Define our tasks using plain functions */
 
// Will delete the directory name build
function clean() {
  // Return a promise: (gulp required that the function return a promise, a stream or alternatively take a call back and call it)
  return del([&#39;build&#39;]);
}
 
// Take all images find in paths.images, minify them and save each of them in &amp;quot;build/img&amp;quot; (initial one doesn&#39;t change)
function images() {
  return gulp.src(paths.images)
    // imagemin is the module required at the beginning of the files, some module can take option
    .pipe(imagemin({optimizationLevel: 5}))
    .pipe(gulp.dest(&#39;build/img&#39;));
}
 
// Minify all JavaScript (except vendor scripts) and save the concatanate result in &amp;quot;build/js&amp;quot;
function scripts() {
  return gulp.src(paths.scripts)
    .pipe(uglify())
    .pipe(concat(&#39;all.min.js&#39;))
    .pipe(gulp.dest(&#39;build/js&#39;));
}
 
// Rerun the task when a file changes 
function watch() {
  gulp.watch(paths.scripts, scripts);
  gulp.watch(paths.images, images);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-small-improvement-and-changes&#34;&gt;3. Small improvement and changes&lt;/h3&gt;

&lt;p&gt;You may have notice that we do a lots of unecessary work about images: 1 image change/was added -&amp;gt; re-optimize everything!&lt;br /&gt;
We can use the gulp-cache pluggin to solve this problem: now check this &lt;a href=&#34;https://www.npmjs.com/package/gulp-cached/&#34;&gt;pluggin&lt;/a&gt; and implement it!&lt;/p&gt;

&lt;p&gt;Also you may have heard about sass, scrap the css and now use sass!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#&#34;&gt;My solution&lt;/a&gt; (update)&lt;/p&gt;

&lt;h3 id=&#34;4-live-reload&#34;&gt;4. Live-reload&lt;/h3&gt;

&lt;p&gt;We have almost a complete automatic process, we just want to stop hitting refresh when we make change. We want gulp to update that automatically for us.
We are in luck there is a useful module compatible with gulp for that: &lt;a href=&#34;https://www.browsersync.io/docs/gulp&#34;&gt;Browsersync&lt;/a&gt;.
I found it harder to implement this one, so I will go step by step.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gulp starter pack</title>
      <link>http://helloworldeverything.com/2016/10/gulp-starter-pack/</link>
      <pubDate>Fri, 14 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://helloworldeverything.com/2016/10/gulp-starter-pack/</guid>
      <description>&lt;p&gt;Simple starter pack for a static web site using the task-runner gulp (with focus on good practice). Use lots of sweet gulp plugin to make the development easier.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;In the series of creating a starter pack for a static web site.&lt;/p&gt;

&lt;!-- toc --&gt;

&lt;h2 id=&#34;goal-of-this-post&#34;&gt;Goal of this post&lt;/h2&gt;

&lt;p&gt;Here a list of what I hope you will be able to do after reading this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explain why task runners are useful&lt;/li&gt;
&lt;li&gt;Understand core concept of Gulp 4.^&lt;/li&gt;
&lt;li&gt;Understand the starter project using gulp&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;problem-gulp-is-tacking&#34;&gt;Problem Gulp is tacking&lt;/h2&gt;

&lt;h1 id=&#34;important-concept&#34;&gt;Important concept&lt;/h1&gt;

&lt;p&gt;Word to understand&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cli:&lt;/li&gt;
&lt;li&gt;command line interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set-up&lt;/p&gt;

&lt;p&gt;The easiest set-up instruction is found on the &lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md&#34;&gt;official documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But because I used Gulp 4 and it is not released you need to replace&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --save-dev gulp 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install gulpjs/gulp.git#4.0  --save-dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise a good introduction between the difference of gulp 3 and gulp 4, can be found in this &lt;a href=&#34;https://www.joezimjs.com/javascript/complete-guide-upgrading-gulp-4/&#34;&gt;guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/PrincessMadMath/hwe_gulp-introduction/tree/1_Copying&#34;&gt;Source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take this following example and analyze it lines by lines:&lt;/p&gt;

&lt;p&gt;gulpfile.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
/* 1: Import required modules for our task: all gulp-plugin necessary will be added here */ 
var gulp = require(&#39;gulp&#39;);

/* 2: Defines globs to target specific files type */ 
var paths = {   scripts: [&#39;src/js/**/*.js&#39;, &#39;!src/external/**/*.js&#39;], };

/****** Register some tasks to expose to the cli or other tasks ******/

// 3-1: We can call this task writing:
gulp build gulp.task(&#39;build&#39;,  scripts);

// 3-2: We can call using: 
gulp watch gulp.task(watch);

// 3-3: The default task, we can call using: 
gulp gulp.task(&#39;default&#39;, gulp.series(&#39;build&#39;, watch));

/******  Define our tasks using plain functions (available in Gulp 4.0) ******/

// 5: Copying all JavaScript (except vendor scripts) into &amp;quot;build/js&amp;quot; 
function scripts() {   
    return gulp.src(paths.scripts)     .pipe(gulp.dest(&#39;build/js&#39;));
}

// 6: Rerun the task when a file changes  
function watch() {   
    gulp.watch(paths.scripts, scripts);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-import&#34;&gt;1. Import&lt;/h2&gt;

&lt;p&gt;Working with gulp implies using many plugins: one to minify, another to compile sass and so on. To be able to use them we need to import them in the gulpfile.&lt;/p&gt;

&lt;p&gt;Here it my current workflow to use a new plugin.&lt;br /&gt;
1. Know what I want
2. Find a plugin that does what I want (using the &lt;a href=&#34;http://gulpjs.com/plugins/&#34;&gt;official plugin registry&lt;/a&gt; or any search engine)
3. Install the plugins to the dev dependencies (production doesn&amp;rsquo;t need to perform gulp task)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install [pluginName] --save-dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Add it in the gulpfile.js&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var relevantName = require(&amp;quot;pluginName&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-node-glob-why-and-how&#34;&gt;2. Node Glob: why and How&lt;/h2&gt;

&lt;p&gt;As you know by now, gulp is all about taking files and do some work with it. So, it is important to have an easy way to specify which files we want to operate on.
Here come glob, a matching pattern makes for files and easier to use than regex.&lt;/p&gt;

&lt;p&gt;When globbing we pass an array of patterns, which you should know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name wildcard (&lt;em&gt;): i.e : &amp;ldquo;&lt;/em&gt;.scss&amp;rdquo; any file ending with .scss&lt;/li&gt;
&lt;li&gt;Folder wildcard (&lt;strong&gt;): i.e : &amp;ldquo;src/&lt;/strong&gt;/*.css&amp;rdquo;: File in any subfolder inside src ending with .css&lt;/li&gt;
&lt;li&gt;Exclusion (!):  Could target a repo (&amp;ldquo;!vendor/&amp;rdquo;) or a specific file (&amp;ldquo;!.config&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Combine pattern (+(|)): i.e: Could be use to find any style file (&amp;rdquo;*.+(scss|css))&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Glob used in the starter project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;html: [&#39;**/*.html&#39;],   
sass: [&#39;scss/**/*.scss&#39;],   
css : [&#39;css/**/*.css&#39;],   
js: [&#39;js/**/*.js&#39;],   
images: [&#39;img/**/*&#39;], 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-tasks&#34;&gt;3. Tasks&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: So now I know that Gulp is a task runner. Can you tell me more about those task!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;3-1-running-tasks&#34;&gt;3.1 Running Tasks&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: So tell me, how can I execute?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is multiple way to execute a task. First they should be available in the gulpfile.js (the name of the file is important and should be in the repo where you use the CLI).&lt;/p&gt;

&lt;p&gt;As we saw in the example above there are 3 ways to declare a task:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/****** Register some tasks to expose to the cli ******/

// 1: Explicitly declare the name
gulp.task(&#39;build&#39;,  scripts);

// 2: Implicitly use the function name 
gulp.task(watch);

// 3: &amp;quot;default&amp;quot; is a reserve keyword to declare the default task 
gulp.task(&#39;default&#39;, gulp.series(&#39;build&#39;, watch));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running #1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; gulp build 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running #2:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gulp watch 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running #3:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gulp 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: What about using the implicit naming and a task sequence?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, you can&amp;rsquo;t and anyway it would result in a mess!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: How can I see which task is available&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Read the gulpfile.js and find the task declaration&lt;/li&gt;
&lt;li&gt;If using gulp 4.0: you can use the following build-in command to list all the tasks and their composition (the blue-green name is task that you can call) ~~~Io $ gulp &amp;ndash;tasks ~~~&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-2-tasks-sequence&#34;&gt;3.2 Tasks sequence&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: I like having decoupled code. Is it possible to create small independent function and group them together?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, yes, it would be a poor task runner otherwise! Gulp 4.0 allows to create sequence of tasks and you can define which task execute in series and which one in parallel.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// We use gulp.series: because we don&#39;t want to start the build before the pre-build is completed 
gulp.task(&#39;compile&#39;, gulp.series(&#39;build:assets&#39;, &#39;build&#39;));

// We use a composition of series and parallel because we first want to delete the assets folder, 
// then we can create the new one. And every asset type can be built independently 
gulp.task(&#39;build:assets&#39;, gulp.series(   
    cleanAsset,    
    gulp.parallel(copyHtml, copyScript, copyCss, copyImages, compileSass) ));

// Same explication as above 
gulp.task(&#39;build&#39;, gulp.series(   
    cleanBuild,   
    gulp.parallel(buildHtml, buildScript, buildCss, buildImages) ));
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: What happens if an error occurs in a task in series&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The task stop and the none of the following is executed.&lt;/p&gt;

&lt;h3 id=&#34;3-3-task-implementation&#34;&gt;3.3 Task implementation&lt;/h3&gt;

&lt;p&gt;The normal implementation of a task consists of selecting some files using globs, do some work with them, and write the resulting files at the target location.&lt;/p&gt;

&lt;h2 id=&#34;4-watch&#34;&gt;4. Watch&lt;/h2&gt;

&lt;p&gt;A watcher is something that will execute tasks when certain event occurs and will continue to do so unless the watcher is stopped (ctrl+c) or an error occurs.&lt;/p&gt;

&lt;h1 id=&#34;gulp-starter-pack&#34;&gt;Gulp starter pack&lt;/h1&gt;

&lt;p&gt;Knowing all we know now, I decide to look into bit more into good practices with gulp so I can create a starter pack that can boost the start of your/my future static web site.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/PrincessMadMath/helloworld-gulp-starter&#34;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;Task we want to perform
* Linting: ensure that everybody uses the same convention
** How enforce before committing/pushing?
* Minify and concat files
** Have better performance
* Autoprefixer&lt;br /&gt;
** Make cleaner style sheet: does not need to add vendor prefix&lt;/p&gt;

&lt;h2 id=&#34;config-file-explication&#34;&gt;Config file explication&lt;/h2&gt;

&lt;p&gt;In this &lt;a href=&#34;https://www.freshconsulting.com/how-to-organize-your-gulp-js-development-builds-for-multiple-environments/&#34;&gt;article&lt;/a&gt;, they talk about using a config files to remove the responsibility of specifying globs, plugin options,&amp;hellip; in the tasks files. It also allows to see everything in one place, easier modification and to reuse tasks for different environments.&lt;/p&gt;

&lt;p&gt;config.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/*************** Load utility plugin to make the config files work ***************/

// Contain function to merge object
var _ = require(&#39;lodash&#39;);
// Be able to get CLI command parameters (for --env)
var gutil = require(&#39;gulp-util&#39;)

/*************** Path ***************/

// All tasks reference path here: make it easier to modify them
var paths = {
    src: &amp;quot;src/&amp;quot;,
    // Warning: changing this name require to add it the .gitignore  
    temp: &amp;quot;.temp/&amp;quot;,
    // Changing the dist folder name also required change in .gitignore and the npm deploy scripts
    dist: &amp;quot;build/&amp;quot;,
    glob: {
        html: [&#39;**/*.html&#39;],
        sass: [&#39;scss/**/*.scss&#39;],
        css: [&#39;css/**/*.css&#39;],
        js: [&#39;js/**/*.js&#39;],
        images: [&#39;img/**/*&#39;],
        assets: [&#39;assets/**/*&#39;]
    },
    dest: {
        html: &#39;&#39;,
        css: &#39;css/&#39;,
        sass: &#39;scss/&#39;,
        js: &#39;js/&#39;,
        images: &#39;img/&#39;,
        assets: &#39;assets/&#39;
    },
}

// Function to prefix a parent directory to each elements in an array of globs: 
//    -&amp;gt; return an array of globs 
// i.e: I want each css files in the src directory: prefixGlob(paths.src, paths.glob.css) 
// Todo: this should but not calculated at runtime...
function prefixGlob(prefix, glob) {
    return glob.map(function (el) {
        return prefix + el;
    })
}

/*************** Little explication ***************

For the next part, it will be split in the different available environment.

The default value will be used for properties that were not overridden. 

**************************************************/


/*************** Constants ***************/

// Currently I don&#39;t use constants but just to know it is possible 
var constants = {
    default: {
        placeHolderConstant: &#39;&#39;
    },
    development: {
        placeHolderConstant: &#39;dev&#39;
    },
    production: {
        placeHolderConstant: &#39;prod&#39;
    }
};



/*************** Plugin toggling ***************/

// Declare which plugins to run for each environment // The cleanest way is to set to false in default and enable them after
var run = {
    default: {
        js: {
            uglify: false
        },
        css: {
            cssnano: false,
            autoprefixer: true,
        },
        html: {
            useref: false
        }
    },

    development: {
        js: {
            uglify: false
        },
        css: {
            cssnano: false
        }
    },

    production: {
        js: {
            uglify: true
        },
        css: {
            cssnano: true
        },
        html: {
            useref: true
        }
    }
};


/*************** Plugin options ***************/

// Declare pluggins option
var plugin = {
    default: {
        js: {
            uglify: {
                mangle: true
            }
        },
        css: {
            autoprefixer: {
                browsers: [&#39;last 2 versions&#39;],
            }
        },
        lint: {
            eslint: {
                configFile: &amp;quot;.eslintrc&amp;quot;,
                fix: true
            }
        }
    },

    development: {
        js: {
            uglify: {

                mangle: false
            }
        },
        lint: {
            eslint: {
                configFile: &amp;quot;.dev.eslintrc&amp;quot;,
            }
        }
    },

    production: {
        js: {
            uglify: {
                mangle: true
            }
        }
    }
};


/*************** Exports ***************/

// How to set : --env=[name]
var env = gutil.env.env || &#39;development&#39;;


// Merge: : set the options depending of the environment and using the default value if not specified
var runOpts = _.merge({}, run.default, run[env]);
var pluginOpts = _.merge({}, plugin.default, plugin[env]);
var constantsOpts = _.merge({}, constants.default, constants[env]);

// Make object available to use
module.exports.constants = constantsOpts;
module.exports.run = runOpts;
module.exports.plugin = pluginOpts;

module.exports.paths = paths;
module.exports.prefixGlob = prefixGlob;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;task-file-explication&#34;&gt;Task file explication&lt;/h2&gt;

&lt;p&gt;It was often recommended to split the tasks in multiple files to again, make things cleaner.&lt;/p&gt;

&lt;p&gt;In my case I split in the following files:
* build.js: Tasks to build the project: make-it browser-ready
* watcher.js: Tasks to start a auto-reload server: to use when developing
* lint.js: Tasks to lint files&lt;/p&gt;

&lt;p&gt;gulpfile.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var gulp = require(&#39;gulp&#39;);

// Plugin to support splitting gulp task in multiple files 
var requireDir = require(&#39;require-dir&#39;);

// If we want to use tasks declare in other files: this plugging enable forward-reference 
var fwdRef = require(&#39;undertaker-forward-reference&#39;);

// Start registry supporting forward-reference
gulp.registry(fwdRef());

// Load different tasks found in the files
requireDir(&#39;./gulp&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;build.js&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Todo: add schema of build pipeline (vertical (step-by-step) vs horizontal (update))&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var gulp = require(&#39;gulp&#39;);
var config = require(&#39;./config&#39;);

/*** html pluggins ***/
var useref = require(&amp;quot;gulp-useref&amp;quot;);

/*** js plugins ***/
var uglify = require(&#39;gulp-uglify&#39;);

/*** style plugins ***/
var sass = require(&#39;gulp-sass&#39;);
var cssnano = require(&#39;gulp-cssnano&#39;);
var autoprefixer = require(&#39;gulp-autoprefixer&#39;);


/*** image plugins ***/
var imagemin = require(&#39;gulp-imagemin&#39;);

/*** util plugins ***/
var del = require(&#39;del&#39;);
var gulpif = require(&#39;gulp-if&#39;);



/*************** Task definition ***************/

gulp.task(&#39;build:check&#39;, gulp.parallel(&#39;lint:js&#39;, &#39;lint:style&#39;));

// From superset files (sass, typescript (not implemented)) to files usable by the browser (css, plain js,...)
gulp.task(&#39;build:compile&#39;, gulp.series(
    cleanCompile,
    gulp.parallel(copyHtml, copyScript, copyCss, copyImages, compileSass)
));

// Different operation to do on basic files: minify, autoprefixer,...
gulp.task(&#39;build:build&#39;, gulp.series(
    cleanBuild,
    gulp.parallel(buildHtml, buildScript, buildCss, buildImages, copyAssets)
));

// Any task that need to be perform on &amp;quot;final&amp;quot; files
gulp.task(&#39;build:post&#39;, postBuildConcat);

/*** Tasks to build step-by-step ***/
gulp.task(&#39;build&#39;, gulp.series(&#39;build:check&#39;, &#39;build:compile&#39;, &#39;build:build&#39;, &#39;build:post&#39;));


gulp.task(&#39;clean&#39;, gulp.parallel(cleanCompile, cleanBuild));


/*** Tasks to update by type ***/
gulp.task(&#39;update:html&#39;, gulp.series(copyHtml, buildHtml, postBuildConcat));
gulp.task(&#39;update:css&#39;, gulp.series(copyCss, buildCss, postBuildConcat));
gulp.task(&#39;update:sass&#39;, gulp.series(compileSass, buildCss, postBuildConcat));
gulp.task(&#39;update:js&#39;, gulp.series(copyScript, buildScript, postBuildConcat));
gulp.task(&#39;update:image&#39;, gulp.series(copyImages, buildImages));
gulp.task(&#39;update:assets&#39;, copyAssets);


/*************** Utils function ***************/

function cleanCompile() {
    return del([config.paths.temp]);
}

function cleanBuild() {
    return del([config.paths.dist]);
}

/*************** Compile function ***************/

function copyHtml() {
    var glob = config.prefixGlob(config.paths.src, config.paths.glob.html);
    var dest = config.paths.temp + config.paths.dest.html;

    return gulp.src(glob)
        .pipe(gulp.dest(dest));
}

function copyScript() {
    var glob = config.prefixGlob(config.paths.src, config.paths.glob.js);
    var dest = config.paths.temp + config.paths.dest.js;

    return gulp.src(glob)
        .pipe(gulp.dest(dest));
}

function copyCss() {
    var glob = config.prefixGlob(config.paths.src, config.paths.glob.css);
    var dest = config.paths.temp + config.paths.dest.css;

    return gulp.src(glob)
        .pipe(gulp.dest(dest));
}

function copyImages() {
    var glob = config.prefixGlob(config.paths.src, config.paths.glob.images);
    var dest = config.paths.temp + config.paths.dest.images;

    return gulp.src(glob)
        .pipe(gulp.dest(dest));
}

function compileSass() {
    var glob = config.prefixGlob(config.paths.src, config.paths.glob.sass);
    var dest = config.paths.temp + config.paths.dest.css;

    return gulp.src(glob)
        .pipe(sass())
        .pipe(gulp.dest(dest));
}


/*************** Build functions (make ready for production) ***************/

function buildHtml() {
    var glob = config.prefixGlob(config.paths.temp, config.paths.glob.html);
    var dest = config.paths.dist + config.paths.dest.html;

    return gulp.src(glob)
        .pipe(gulp.dest(dest));
}

// Only take from .temp and minify
function buildCss() {
    var glob = config.prefixGlob(config.paths.temp, config.paths.glob.css);
    var dest = config.paths.dist + config.paths.dest.css;

    return gulp.src(glob)
        .pipe(gulpif(config.run.css.autoprefixer, autoprefixer(config.plugin.css.autoprefixer)))
        .pipe(gulpif(config.run.css.cssnano, cssnano()))
        .pipe(gulp.dest(dest));
}

function buildImages() {
    var glob = config.prefixGlob(config.paths.temp, config.paths.glob.images);
    var dest = config.paths.dist + config.paths.dest.images;

    return gulp.src(glob)
        .pipe(imagemin({
            optimizationLevel: 5
        }))
        .pipe(gulp.dest(dest));
}

function buildScript() {
    var glob = config.prefixGlob(config.paths.temp, config.paths.glob.js);
    var dest = config.paths.dist + config.paths.dest.js;

    return gulp.src(glob)
        .pipe(gulpif(config.run.js.uglify, uglify(config.plugin.js.uglify)))
        .pipe(gulp.dest(dest));
}

function copyAssets() {
    var glob = config.prefixGlob(config.paths.src, config.paths.glob.assets);
    var dest = config.paths.dist + config.paths.dest.assets;

    return gulp.src(glob)
        .pipe(gulp.dest(dest));
}


/*************** Post-build task (final file modification) ***************/

// Because we concat files based on the declaration in the .html, we need to
// run the concat everytime one of the target files is update 
// (or else it is not in the concat version)
function postBuildConcat() {
    var glob = config.prefixGlob(config.paths.dist, config.paths.glob.html);
    var dest = config.paths.dist + config.paths.dest.html;

    return gulp.src(glob)
        .pipe(gulpif(config.run.html.useref, useref()))
        .pipe(gulp.dest(dest));
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;watcher.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;);
var config = require(&#39;./config&#39;);

// Plugin to enable live-reload (https://www.browsersync.io/docs/gulp)
var browserSync = require(&#39;browser-sync&#39;).create();


/*************** Task definition ***************/
gulp.task(&#39;server&#39;, gulp.series(&#39;build&#39;, gulp.parallel(&#39;lint:watch&#39;, watchBuild, watchServer, startServer)));


/*************** Watcher functions (change -&amp;gt; build) ***************/

// When a modification is done in the src folder, update the build
function watchBuild() {
    var html_glob = config.prefixGlob(config.paths.src, config.paths.glob.html);
    var js_glob = config.prefixGlob(config.paths.src, config.paths.glob.js);
    var image_glob = config.prefixGlob(config.paths.src, config.paths.glob.images);
    var sass_glob = config.prefixGlob(config.paths.src, config.paths.glob.sass);
    var css_glob = config.prefixGlob(config.paths.src, config.paths.glob.css);
    var assets_glob = config.prefixGlob(config.paths.src, config.paths.glob.assets);

    gulp.watch(html_glob, gulp.series(&#39;update:html&#39;));
    gulp.watch(js_glob, gulp.series(&#39;update:js&#39;));
    gulp.watch(image_glob, gulp.series(&#39;update:image&#39;));
    gulp.watch(sass_glob, gulp.series(&#39;update:sass&#39;));
    gulp.watch(css_glob, gulp.series(&#39;update:css&#39;));
    gulp.watch(assets_glob, gulp.series(&#39;update:assets&#39;));
}

// When change occurs in /build we want to notify the server (reload or inject)
function watchServer() {
    var html_glob = config.prefixGlob(config.paths.dist, config.paths.glob.html);
    var js_glob = config.prefixGlob(config.paths.dist, config.paths.glob.js);
    var image_glob = config.prefixGlob(config.paths.dist, config.paths.glob.images);
    var css_glob = config.prefixGlob(config.paths.dist, config.paths.glob.css);
    var assets_glob = config.prefixGlob(config.paths.dist, config.paths.glob.assets);

    gulp.watch(html_glob, reload);
    gulp.watch(js_glob, reload);
    gulp.watch(image_glob, reload);
    gulp.watch(css_glob, injectCss);
    gulp.watch(assets_glob, reload);
}

/*************** Browsersync helper function ***************/

function startServer() {
    browserSync.init({
        server: {
            baseDir: config.paths.dist
        }
    });
}

// Inject css files (instead of reloading)
function injectCss() {
    var css_glob = config.prefixGlob(config.paths.dist, config.paths.glob.css);

    return gulp.src(css_glob)
        .pipe(browserSync.stream());
}

function reload(done) {
    browserSync.reload();
    done();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;annex-a-questions-i-asked-myself&#34;&gt;Annex A: Questions I asked myself.&lt;/h1&gt;

&lt;h2 id=&#34;how-does-it-work-behind-the-scenes&#34;&gt;How does it work behind the scenes?&lt;/h2&gt;

&lt;p&gt;Each plugin manipulate virtual file that are streamed with node&amp;rsquo;s stream (all manipulation is done in memoery: there is no intermediate files). You can use streamed files (access by chunks) or a buffer (if the whole file is needed before starting task).&lt;/p&gt;

&lt;p&gt;I created 2 minimal plugin that lower every character. Minimal because no check nor error handling.&lt;/p&gt;

&lt;p&gt;Using buffer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var through = require(&#39;through2&#39;);

function transformText(file) {
var content = file.contents.toString(&#39;utf8&#39;);
return content.toLowerCase();
}

// plugin level function: will deals which each files function toLowerPlugin(){

function handleFile(file, enc, callback){

//  if (file.isBuffer())          var output = transformText(file);

file.contents = new Buffer(output, &#39;utf8&#39;);

// Notify stream engine that we are done with this file         callback(null, file);
}

return  through.obj(handleFile);
}

// Make it available to use module.exports = toLowerPlugin;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using stream:&lt;/p&gt;

&lt;p&gt;They also recommend supporting streaming, but most of the example I found doesn&amp;rsquo;t support them. Maybe I will give an example later.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/@webprolific/getting-gulpy-a2010c13d3d5#.dosj4tpx9&#34;&gt;Good documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-are-the-alternatives-of-gulp&#34;&gt;What are the alternatives of gulp?&lt;/h2&gt;

&lt;p&gt;First you can look at other task runners:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grunt -&amp;gt; getting their powerfulness from all the available plugins, seem more complicated to setup/use than gulp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then you can ask yourself if we can do things differently: here come bundlers.&lt;/p&gt;

&lt;h2 id=&#34;i-saw-there-is-multiple-way-we-can-use-watchers-can-you-tell-me-more-about-them&#34;&gt;I saw there is multiple way we can use watchers, can you tell me more about them.&lt;/h2&gt;

&lt;p&gt;(todo)&lt;/p&gt;

&lt;h2 id=&#34;what-about-npm-packages-and-modules&#34;&gt;What about npm, packages and modules?&lt;/h2&gt;

&lt;p&gt;The purpose of npm is to shared small block of code solving a problem (called package).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: OK but what consists of a package?_&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, it is simple a directory where you find a package.json file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ohhh and what can it do?_&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It can add new available command for the command line (like gulp) or export method that you can use in you js file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FMORR: OK last question! What is the difference between a module and a package?_&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Everything within require() is a module. A module is a single js file exposing multiple function that we can use (look for the &lt;strong&gt;exports&lt;/strong&gt; keyword). A package can contain multiple modules and depend on other packages and contains an entry point (often index.js) that is use in the require().&lt;/p&gt;

&lt;h1 id=&#34;annex-b-sources&#34;&gt;Annex B: Sources&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gulpjs/gulp&#34;&gt;Source code of Gulp&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.npmjs.com/package/gulp-4.0.build&#34;&gt;Official code sample&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/README.md&#34;&gt;Official documentation&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>